$(function() {

    /* Typed-in animation setup */
    if($('.typed-in').length) {
        var typed = new Typed('.typed-in', {
            stringsElement: '.typed-phrases',
            typeSpeed: 40,
            backDelay: 1400,
            backSpeed: 30,
            loop: true
        });
    }

    /* Bootstrap popover setup */
    $('[data-toggle="popover"]').popover({
        content: function(){
            if ($(this).data('content')){
                return $(this).data('content');
            } else if ($(this).find('.popover-body').length) {
                return $(this).find('.popover-body');
            }
        }
    });

    /* Re-arrange HTML generated by DataTable */
    var DataTable = $.fn.dataTable;
    $.extend( true, DataTable.defaults, {
        dom:
            "<'row datatables-top'<'col-sm-12 col-md-6 col-show'l><'col-sm-12 col-md-6 col-search'f>>" +
            "<'row'<'col-sm-12'tr>>" +
            "<'row datatables-bottom'<'col-sm-12 col-md-5 col-paginate'p><'col-sm-12 col-md-7 col-info'i>>",
        renderer: 'bootstrap'
    } );

    $('.dynamic-table').DataTable( {
        initComplete: function () {
            let nbFilters = 0;
            this.api().columns().every( function () {
                var column = this;
                window['col'] = column;

                // Remove sorting if not set
                if (column.header().dataset.sort !== 'yes') {
                    $(column.header()).unbind('click');
                    $(column.header()).unbind('click');
                }

                // Setup filtering on column
                if (column.header().dataset.filter === 'yes') {
                    window['col'] = column;
                    var select = $('<select><option value="">All</option></select>')
                    //.appendTo( $(column.footer()).empty() )
                    .appendTo( $(column.header().dataset.filterCell) )
                    .on( 'change', function () {
                        var val = $.fn.dataTable.util.escapeRegex(
                            $(this).val()
                        );

                        column
                            .search( val ? '^'+val+'$' : '', true, false )
                            .draw();
                    } );

                    column.data().unique().sort().each( function ( d, j ) {
                        select.append( '<option value="'+d+'">'+d+'</option>' )
                    } );
                    nbFilters++;
                }
            } );

            if (nbFilters > 0) {
                $('.table-filtering').show();
            }
        }
    } );

    $(document).on('lity:open', function(event, instance) {
        // Add caption div to the lightbox
        if ($(instance.opener()).data('caption')){
            const $captionDiv = $('<div></div>').addClass('lity-caption').html($(instance.opener()).data('caption'));
            $(instance.element()).find('.lity-container').append($captionDiv);
        }
    });

    if ($('.vesc-log-chart-container .chart-container').length && window.labels && window.datasets) {
      // $("#vescLogChart").css('width', window.labels.length * 8+'px');
      const chartCanva = $('<canvas id="vescLogChart"></canvas>');
      chartCanva.css('width', window.labels.length * 8+'px');
      chartCanva.css('height', 300+'px');
      $('.vesc-log-chart-container .chart-container').append(chartCanva);
      const ctx = document.getElementById("vescLogChart").getContext('2d');
      let chartDataset = [];

      const myChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: window.labels,
          datasets: chartDataset
        },
        options: {
          responsive: false,
          tooltips: {
            mode: 'index',
            intersect: false,
          },
          hover: {
            mode: 'nearest',
            intersect: true
          },
          scales: {
            yAxes: [{
              ticks: {
                beginAtZero:true
              }
            }]
          }
        }
      });

      const defaultData = ['MotorCurrent', 'BatteryCurrent', 'Speed'];

      for (let i = 0; i < window.datasets.length; i++) {
        if ($.inArray(window.datasets[i].label, defaultData)) {
            chartDataset.push(window.datasets[i]);
        }
      }

      myChart.update();
    }
});
